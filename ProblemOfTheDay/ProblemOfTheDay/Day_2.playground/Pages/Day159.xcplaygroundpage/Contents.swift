//: [Previous](@previous)

import Foundation

class Solution {

    // 1332. Remove Palindromic Subsequences
    // You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
    // Return the minimum number of steps to make the given string empty.
    // A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
    // A string is called palindrome if is one that reads the same backward as well as forward.
    // Finds the minimum number of steps to make the given string empty.

    // - Parameter s: The string.
    // - Returns: The minimum number of steps.
    // Example 1:
    // Input: s = "ababa"
    // Output: 1
    // Explanation: s is already a palindrome, so its entirety can be removed in a single step.
    // Example 2:
    // Input: s = "abb"
    // Output: 2
    // Explanation: "abb" -> "bb" -> "".
    // Remove palindromic subsequence "a" then "bb".
    // Example 3:
    // Input: s = "baabb"
    // Output: 2
    // Explanation: "baabb" -> "b" -> "".
    // Remove palindromic subsequence "baab" then "b".
    // Constraints:
    // 1 <= s.length <= 1000
    // s[i] is either 'a' or 'b'.
    // - Complexity:
    //   - time: O(n), where n is the length of s.
    //   - space: O(1), only constant space is used.

    func removePalindromeSub(_ s: String) -> Int {
        guard !s.isEmpty else { return 0 }
        return isPalindrome(Array(s)) ? 1 : 2
    }


    private func isPalindrome(_ s: [Character]) -> Bool {
        var start = 0
        var end = s.count - 1

        while start < end {
            guard s[start] == s[end] else { return false }
            start += 1
            end -= 1
        }

        return true
    }

}

//: [Next](@next)
